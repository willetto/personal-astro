---
description: Interactive migration guide for transforming static Astro sections into dynamic Sanity-powered sections
globs:
alwaysApply: false
---

# üîÑ Interactive Section Migration Assistant

You are helping migrate a static Astro section to be dynamically managed by Sanity CMS. Follow this interactive workflow to make informed schema design decisions.

## üéØ Migration Approach

**Ask strategic questions first, then implement**. Every hardcoded element should prompt a decision about how it should be managed in the CMS.

---

## üìã Step 1: Section Analysis & Discovery

### üîç Hardcoded Content Detection

**Examine the Astro component and ask these questions:**

1. **"What hardcoded strings, arrays, or objects do I see?"**
   - Look for static text, labels, descriptions
   - Identify embedded data structures like:
     ```typescript
     const data = [
       { icon: "Filters", category: "ACH", text: "..." },
       { icon: "WaveSquare", category: "Bank accounts", text: "..." }
     ];
     ```

2. **"Which hardcoded elements should become editable?"**
   - Marketing copy that changes frequently
   - Feature lists that evolve over time
   - CTAs that need A/B testing
   - Contact information or links

### ü§î Schema Design Questions

**For each hardcoded array or object, ask:**

- **"Should each item be individually editable in the CMS?"**
  - YES ‚Üí Create array field with object items
  - NO ‚Üí Keep as hardcoded defaults

- **"Will content creators need to add/remove items?"**
  - YES ‚Üí Dynamic array with min/max validation
  - NO ‚Üí Fixed structure with optional fields

- **"Do items need different layouts or types?"**
  - YES ‚Üí Union type with multiple item types
  - NO ‚Üí Single object type for all items

- **"Should items be reusable across different sections?"**
  - YES ‚Üí Create separate document type and use references
  - NO ‚Üí Embed objects directly in section schema

### üé® Icon Handling Strategy

**When you find icon references like:**
```astro
{section.icon === "Filters" && <Filters size="base" />}
```

**Ask these decision questions:**

1. **"Should users select from existing icons or upload custom ones?"**
   - **Library icons**: String field with options from [`frontend/src/components/foundations/icons/`](frontend/src/components/foundations/icons/)
   - **Custom uploads**: Image field with SVG/PNG support  
   - **Both options**: Union type or conditional fields

2. **"How many icons are available?"** (Currently ~70 icons)
   - **Few icons (< 10)**: Radio buttons layout
   - **Many icons (> 10)**: Dropdown or searchable list

**Implementation examples:**
```typescript
// Option A: Icon library selection
defineField({
  name: "icon",
  title: "Icon",
  type: "string",
  options: {
    list: [
      { title: "Filters", value: "Filters" },
      { title: "Wave Square", value: "WaveSquare" },
      { title: "Arrow Iteration", value: "ArrowIteration" },
      // Add all relevant icons from /icons/ directory
    ]
  }
})

// Option B: Custom icon upload
defineField({
  name: "customIcon",
  title: "Custom Icon", 
  type: "image",
  options: { accept: "image/svg+xml,image/png" }
})
```

---

## üèóÔ∏è Step 2: Schema Creation

### üìù Content Field Decisions

**For each content element, determine:**

1. **Text field type:**
   - **Headers**: `string` (single line, SEO-friendly length)
   - **Subheadings**: `text` (project preference: plaintext, not portable text)
   - **Rich content**: `array` with portable text (only when formatting needed)

2. **Field requirements:**
   - **Critical content**: Add `validation: (rule) => rule.required()`
   - **Optional enhancements**: Leave optional with good defaults

3. **Length constraints:**
   - Headers: 60-80 characters for SEO
   - Descriptions: 150-300 characters for readability

### üîÑ Array Field Configuration

**For repeating content patterns:**

1. **Set appropriate limits:**
   ```typescript
   validation: (rule) => rule.min(1).max(8) // Adjust based on design
   ```

2. **Create meaningful previews:**
   ```typescript
   preview: {
     select: { title: "category", subtitle: "text" },
     prepare({ title, subtitle }) {
       return {
         title: title || "Untitled Item",
         subtitle: subtitle ? subtitle.substring(0, 60) + "..." : "",
       };
     },
   }
   ```

### üéØ CTA Implementation

**Project standard: Always include both primary and secondary CTAs**

```typescript
// Primary CTA
defineField({
  name: "primaryCtaLabel",
  title: "Primary CTA Label",
  type: "string",
}),
defineField({
  name: "primaryCtaHref", 
  title: "Primary CTA Href",
  type: "string",
}),
defineField({
  name: "primaryCtaTarget",
  title: "Primary CTA Target",
  type: "string",
  options: { list: ["", "_blank", "_self", "_parent", "_top"] },
  initialValue: "",
}),

// Secondary CTA (repeat pattern)
defineField({
  name: "secondaryCtaLabel",
  title: "Secondary CTA Label", 
  type: "string",
}),
// ... repeat for secondary CTA fields
```

### üìê Layout Options

**If original design supports alignment variations:**

```typescript
defineField({
  name: "alignment",
  title: "Alignment",
  type: "string", 
  options: {
    list: [
      { title: "Center", value: "center" },
      { title: "Left", value: "left" },
    ],
    layout: "radio",
    direction: "horizontal",
  },
  initialValue: "left", // Match original design default
}),
```

---

## üõ†Ô∏è Step 3: Component Conversion

### üîÑ Props Interface Update

```astro
---
// Replace generic props with typed CMS data
interface Props { feature?: import("@/data/sanity").YourSectionType }
const { feature } = Astro.props as Props;

// Extract hardcoded defaults as fallbacks
const header = feature?.header || "Original Hardcoded Header";
const subheading = feature?.subheading || "Original hardcoded description";

// Handle alignment if applicable
const isCenter = (feature?.alignment || "left") === "center";

// Process CTAs with security considerations
const primaryLabel = feature?.primaryCtaLabel || "";
const primaryHref = feature?.primaryCtaHref || "#_";
const primaryTarget = feature?.primaryCtaTarget || "";
const primaryRel = primaryTarget === "_blank" ? "noopener noreferrer" : undefined;

// Convert hardcoded arrays to dynamic data
const items = feature?.items || [
  // Provide original hardcoded data as defaults
  {
    icon: "Filters",
    category: "ACH", 
    text: "Initiate ACH transactions, process both credits and debits..."
  },
  // ... other original items
];
---
```

### üé® Dynamic Rendering Patterns

**For icon rendering:**
```astro
<!-- Dynamic icon mapping -->
{item.icon && (
  <div class="flex p-2 bg-yellow-400 rounded-lg">
    {item.icon === "Filters" && <Filters size="base" />}
    {item.icon === "WaveSquare" && <WaveSquare size="base" />}
    {item.icon === "ArrowIteration" && <ArrowIteration size="base" />}
    <!-- Add mappings for all supported icons -->
  </div>
)}
```

**For conditional alignment:**
```astro
<div class={isCenter ? "text-center" : "text-left"}>
  <!-- Content with dynamic alignment -->
</div>

<div class={`flex gap-3 mt-6 ${isCenter ? "justify-center" : ""}`}>
  <!-- CTAs with alignment-aware positioning -->
</div>
```

**For array rendering:**
```astro
{items && items.length > 0 && (
  <ul class="grid gap-px bg-base-200 rounded-xl sm:grid-cols-2 md:grid-cols-3">
    {items.map((item) => (
      <li class="bg-white p-6 rounded-xl">
        <!-- Render each item with proper fallbacks -->
        {item.category && <h3 class="font-medium">{item.category}</h3>}
        {item.text && <p class="text-base-500">{item.text}</p>}
      </li>
    ))}
  </ul>
)}
```

---

## üîó Step 4: Integration Setup

### üìä GROQ Query Creation

**Add to [`frontend/src/data/sanity/groq.ts`](frontend/src/data/sanity/groq.ts):**

```typescript
export const YOUR_SECTION_FIELDS = `
  _type,
  header,
  subheading,
  alignment,
  items[] {
    icon,
    category,
    text
  },
  primaryCtaLabel,
  primaryCtaHref,
  primaryCtaTarget,
  secondaryCtaLabel,
  secondaryCtaHref,
  secondaryCtaTarget
`;

// Add to ALL_SECTION_FIELDS
export const ALL_SECTION_FIELDS = `
  ${HERO_FIELDS},
  ${FEATURE1_FIELDS},
  ${YOUR_SECTION_FIELDS}
`;
```

### üè∑Ô∏è TypeScript Types

**Add to [`frontend/src/data/sanity/index.ts`](frontend/src/data/sanity/index.ts):**

```typescript
export type YourSectionItem = {
  icon?: string;
  category?: string;
  text?: string;
};

export type YourSectionType = {
  _type: "yourSection";
  header?: string;
  subheading?: string;
  alignment?: "center" | "left";
  items?: YourSectionItem[];
  primaryCtaLabel?: string;
  primaryCtaHref?: string;
  primaryCtaTarget?: LinkTarget;
  secondaryCtaLabel?: string;
  secondaryCtaHref?: string;
  secondaryCtaTarget?: LinkTarget;
};

// Extend Section union
export type Section =
  | Hero
  | Feature1Section
  | YourSectionType; // Add your type here
```

### üó∫Ô∏è Render Map Registration

**Add to [`frontend/src/pages/index.astro`](frontend/src/pages/index.astro):**

```typescript
import YourSectionComponent from "@/components/path/YourSection.astro";

const sectionComponents = {
  hero1: Hero1,
  feature1: Feature1,
  yourSection: YourSectionComponent, // Key must match schema name
} as const;
```

---

## ‚úÖ Step 5: Quality Assurance

### üß™ Testing Checklist

**Verify these scenarios:**

- [ ] **Component renders without CMS data** (using defaults)
- [ ] **All interactive elements work** (CTAs, links, icons)
- [ ] **External links** have `target="_blank"` and `rel="noopener noreferrer"`
- [ ] **Light/dark mode** styling works with `dark:` classes
- [ ] **Responsive design** maintained across breakpoints
- [ ] **No console errors** or TypeScript issues
- [ ] **Sanity Studio** authoring experience is intuitive

### üéØ Content Creator Testing

**Test in Sanity Studio:**

1. **Create section with minimal required fields**
2. **Add optional fields and verify rendering**
3. **Test array limits** (min/max validation)
4. **Try different alignment options**
5. **Configure both primary and secondary CTAs**
6. **Verify preview shows meaningful information**

---

## üö® Common Issues & Solutions

### ‚ùå Schema Issues

**Problem**: Over-complicated schema with unused fields
**Solution**: Start minimal, add fields only when needed

**Problem**: Icon field doesn't match available icons
**Solution**: Verify icon names match files in [`frontend/src/components/foundations/icons/`](frontend/src/components/foundations/icons/)

### ‚ùå Component Issues

**Problem**: Component breaks without CMS data
**Solution**: Always provide sensible defaults from original hardcoded values

**Problem**: Dynamic classes break responsive design
**Solution**: Test all breakpoints with various content lengths

### ‚ùå Integration Issues

**Problem**: GROQ query missing fields used by component
**Solution**: Ensure GROQ includes all fields referenced in component

**Problem**: TypeScript errors in render map
**Solution**: Verify type definitions match schema structure

---

## üéØ Success Criteria

**Migration is complete when:**

‚úÖ **Zero hardcoded content** remains in component
‚úÖ **Intuitive authoring experience** in Sanity Studio
‚úÖ **Robust error handling** with graceful defaults
‚úÖ **Type safety** maintained throughout data flow
‚úÖ **Original design** preserved with new flexibility
‚úÖ **Performance** equivalent to static version

---

## üìö Quick Reference

### Icon Library Options
Available icons in [`frontend/src/components/foundations/icons/`](frontend/src/components/foundations/icons/):
- Accessibility, AdjustmentsHorizontal, AlertTriangle, ApiApp, Apple, Apps
- ArrowBackwards, ArrowDown, ArrowIteration, ArrowNarrowRight, ArrowRight, ArrowUp
- Automation, Brain, Bulb, Burger, Camera, Cart, Check, ChevronDown, ChevronLeft
- ChevronRight, ChevronUp, Chrome, CircleArrowRight, CircleCheck, CircleInfo
- And ~50 more icons...

### Project Standards
- **Sections**: Always include `py-12` class for vertical padding
- **CTAs**: Always support both primary and secondary
- **Subheadings**: Use `text` type (plaintext), not portable text
- **Links**: External links need `target="_blank"` and `rel="noopener noreferrer"`
- **Alignment**: Add alignment option only if original design supports it
- **Dark mode**: Use `dark:` classes for theme support

### File Locations
- **Schemas**: [`studio/schema-types/sections/`](studio/schema-types/sections/)
- **GROQ**: [`frontend/src/data/sanity/groq.ts`](frontend/src/data/sanity/groq.ts)
- **Types**: [`frontend/src/data/sanity/index.ts`](frontend/src/data/sanity/index.ts)
- **Render Map**: [`frontend/src/pages/index.astro`](frontend/src/pages/index.astro)
- **Components**: [`frontend/src/components/`](frontend/src/components/)

Remember: The goal is creating a sustainable, user-friendly content management experience that empowers content creators while maintaining technical excellence.
