---
import { getCollection } from "astro:content";
const posts = await Promise.all(
  (await getCollection("posts")).map(async (post) => ({
    title: post.data.title,
    pubDate: post.data.pubDate,
    description: post.data.description,
    slug: post.slug,
  }))
);
---

<div class="relative">
  <button
    type="button"
    id="searchButton"
    aria-label="Search posts"
    class="flex items-center justify-center p-2 rounded-full bg-base-50 hovr:bg-base-100"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="size-4"
      fill="currentColor"
      viewBox="0 0 256 256"
      ><path
        d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"
      ></path></svg
    >
  </button>
  <div
    id="searchModal"
    class="fixed inset-0 z-50 overflow-y-auto hidden"
    role="dialog"
    aria-modal="true"
  >
    <div class="min-h-screen px-4 text-center">
      <div
        class="fixed inset-0 bg-base-950/50 backdrop-blur transition-opacity"
        id="modalOverlay"
      >
      </div>
      <div
        class="inline-block w-full max-w-2xl mb-8 mt-12 lg:mt-48 px-8 lg:px-12 bg-white bg-stripes  text-left align-middle transition-all transform"
      >
        <div class="bg-white p-4 pb-2 border-x border-base-200 ">
          <div class="hidden">
            <button
              type="button"
              id="closeSearch"
              class="text-base-400 hover:text-base-500 cursor-pointer ml-auto"
              aria-label="Close search"
            >
              <svg
                width="15"
                height="15"
                viewBox="0 0 15 15"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  d="M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704ZM9.85358 5.14644C10.0488 5.3417 10.0488 5.65829 9.85358 5.85355L8.20713 7.49999L9.85358 9.14644C10.0488 9.3417 10.0488 9.65829 9.85358 9.85355C9.65832 10.0488 9.34173 10.0488 9.14647 9.85355L7.50002 8.2071L5.85358 9.85355C5.65832 10.0488 5.34173 10.0488 5.14647 9.85355C4.95121 9.65829 4.95121 9.3417 5.14647 9.14644L6.79292 7.49999L5.14647 5.85355C4.95121 5.65829 4.95121 5.3417 5.14647 5.14644C5.34173 4.95118 5.65832 4.95118 5.85358 5.14644L7.50002 6.79289L9.14647 5.14644C9.34173 4.95118 9.65832 4.95118 9.85358 5.14644Z"
                  fill="currentColor"
                  fill-rule="evenodd"
                  clip-rule="evenodd"></path></svg
              >
            </button>
          </div>
          <input
            type="text"
            id="searchInput"
            placeholder="Search posts..."
            class="block w-full h-10 px-4 py-2 text-sm text-teal-700 border border-transparent rounded-lg appearance-none duration-300 bg-base-100 placeholder-base-400 focus:bg-transparent focus:outline-none focus:ring-teal-500 focus:ring-offset-2 focus:ring-2 focus:ring-offset-base-200"
          />
          <div
            id="searchResults"
            class="max-h-200 overflow-y-auto mt-2 bg-white w-full flex flex-col rounded-xl scrollbar-hide focus:outline-none space-y-2 focus:ring-2 focus:ring-teal-500"
          >
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script is:inline define:vars={{ posts }}>
  window.addEventListener("load", () => {
    // Get references to necessary DOM elements
    const searchButton = document.getElementById("searchButton");
    const searchModal = document.getElementById("searchModal");
    const modalOverlay = document.getElementById("modalOverlay");
    const searchInput = document.getElementById("searchInput");
    const searchResults = document.getElementById("searchResults");
    const closeSearch = document.getElementById("closeSearch");
    // Clear the search input field on page load to prevent old values from persisting
    searchInput.value = "";
    // Initialize Fuse.js for fuzzy searching
    const fuse = new Fuse(posts, {
      keys: ["title", "description", "content"], // Fields to search in
      threshold: 0.3, // Determines search sensitivity (lower = stricter match)
      includeMatches: true, // Includes matched text segments in results
    });
    // Function to open the search modal
    function openSearch(e) {
      e.preventDefault();
      e.stopPropagation();
      searchModal.classList.remove("hidden"); // Show the modal
      document.body.style.overflow = "hidden"; // Prevent scrolling in the background
      setTimeout(() => searchInput.focus(), 100); // Delay focus to ensure input is ready
    }
    // Function to close the search modal
    function closeSearchModal(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      searchModal.classList.add("hidden"); // Hide the modal
      document.body.style.overflow = ""; // Restore scrolling functionality
      searchInput.value = ""; // Clear search input when modal is closed
      searchResults.innerHTML = ""; // Clear search results
    }
    // Function to display search results
    function renderResults(results) {
      // If search input is empty, clear results
      if (!searchInput.value.trim()) {
        searchResults.innerHTML = "";
        return;
      }
      // If no results are found, display a message
      if (results.length === 0) {
        searchResults.innerHTML = `
                <div class="px-4 py-3 text-sm text-base-500">
                    No results found
                </div>
            `;
        return;
      }
      // Generate HTML for search results and display them
      searchResults.innerHTML = results
        .slice(0, 5) // Limit results to top 5 matches
        .map(
          (result) => `
                <a href="/blog/posts/${result.item.slug}"   class="block px-4 py-3 rounded-lg hover:bg-base-50 focus:outline-none focus:ring-2 focus:ring-teal-500  duration-300">   
                  <h3 class="font-medium text-base-800">${result.item.title}</h3>   
                  <p class="mt-2 text-xs text-base-500">${result.item.description}</p> 
                </a>
            `
        )
        .join(""); // Convert array of HTML into a single string
    }
    // Attach event listeners for opening the search modal (both click and touch)
    searchButton.addEventListener("click", openSearch);
    searchButton.addEventListener("touchend", openSearch);
    // Attach event listeners for closing the search modal (both click and touch)
    closeSearch.addEventListener("click", closeSearchModal);
    closeSearch.addEventListener("touchend", closeSearchModal);
    // Close the modal when clicking outside the search box
    modalOverlay.addEventListener("click", closeSearchModal);
    modalOverlay.addEventListener("touchend", closeSearchModal);
    // Perform search when input changes
    searchInput.addEventListener("input", (e) => {
      const value = e.target.value; // Get the input value
      const results = value.trim() ? fuse.search(value) : []; // Perform search if input isn't empty
      renderResults(results); // Update the displayed results
    });
    // Close the search modal when pressing the "Escape" key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !searchModal.classList.contains("hidden")) {
        closeSearchModal();
      }
    });
  });
</script>
